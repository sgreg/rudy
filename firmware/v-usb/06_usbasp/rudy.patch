diff -Nua /tmp/usbasp.2011-05-28/firmware/main.c ./main.c
--- /tmp/usbasp.2011-05-28/firmware/main.c	2011-05-28 10:57:49.000000000 +0300
+++ ./main.c	2020-07-23 17:44:15.033249675 +0300
@@ -17,6 +17,7 @@
 #include <avr/interrupt.h>
 #include <avr/pgmspace.h>
 #include <avr/wdt.h>
+#include <util/delay.h>
 
 #include "usbasp.h"
 #include "usbdrv.h"
@@ -301,24 +302,6 @@
 }
 
 int main(void) {
-	uchar i, j;
-
-	/* no pullups on USB and ISP pins */
-	PORTD = 0;
-	PORTB = 0;
-	/* all outputs except PD2 = INT0 */
-	DDRD = ~(1 << 2);
-
-	/* output SE0 for USB reset */
-	DDRB = ~0;
-	j = 0;
-	/* USB Reset by device only required on Watchdog Reset */
-	while (--j) {
-		i = 0;
-		/* delay >10ms for USB reset */
-		while (--i)
-			;
-	}
 	/* all USB and ISP pins inputs */
 	DDRB = 0;
 
@@ -328,6 +311,12 @@
 
 	/* init timer */
 	clockInit();
+    
+    /* Force device re-enumeration */
+    usbDeviceDisconnect();
+    _delay_ms(100);
+    usbDeviceConnect();
+
 
 	/* main event loop */
 	usbInit();
diff -Nua /tmp/usbasp.2011-05-28/firmware/Makefile ./Makefile
--- /tmp/usbasp.2011-05-28/firmware/Makefile	2011-05-28 10:57:49.000000000 +0300
+++ ./Makefile	2020-07-22 18:06:57.884027558 +0300
@@ -1,135 +1,31 @@
 #
-#   Makefile for usbasp
-#   20061119   Thomas Fischl        original
-#   20061120   Hanns-Konrad Unger   help: and TARGET=atmega48 added
+# RUDY - the Random USB Device
+# Makefile for Hello USB V-USB example
 #
-
-# TARGET=atmega8    HFUSE=0xc9  LFUSE=0xef
-# TARGET=atmega48   HFUSE=0xdd  LFUSE=0xff
-# TARGET=at90s2313
-TARGET=atmega8
-HFUSE=0xc9
-LFUSE=0xef
-
-
-# ISP=bsd      PORT=/dev/parport0
-# ISP=ponyser  PORT=/dev/ttyS1
-# ISP=stk500   PORT=/dev/ttyS1
-# ISP=usbasp   PORT=/dev/usb/ttyUSB0
-# ISP=stk500v2 PORT=/dev/ttyUSB0
-ISP=usbasp
-PORT=/dev/usb/ttyUSB0
-
-help:
-	@echo "Usage: make                same as make help"
-	@echo "       make help           same as make"
-	@echo "       make main.hex       create main.hex"
-	@echo "       make clean          remove redundant data"
-	@echo "       make disasm         disasm main"
-	@echo "       make flash          upload main.hex into flash"
-	@echo "       make fuses          program fuses"
-	@echo "       make avrdude        test avrdude"
-	@echo "Current values:"
-	@echo "       TARGET=${TARGET}"
-	@echo "       LFUSE=${LFUSE}"
-	@echo "       HFUSE=${HFUSE}"
-	@echo "       CLOCK=12000000"
-	@echo "       ISP=${ISP}"
-	@echo "       PORT=${PORT}"
-
-COMPILE = avr-gcc -Wall -O2 -Iusbdrv -I. -mmcu=$(TARGET) # -DDEBUG_LEVEL=2
-
-OBJECTS = usbdrv/usbdrv.o usbdrv/usbdrvasm.o usbdrv/oddebug.o isp.o clock.o tpi.o main.o
-
-.c.o:
-	$(COMPILE) -c $< -o $@
-#-Wa,-ahlms=$<.lst
-
-.S.o:
-	$(COMPILE) -x assembler-with-cpp -c $< -o $@
-# "-x assembler-with-cpp" should not be necessary since this is the default
-# file type for the .S (with capital S) extension. However, upper case
-# characters are not always preserved on Windows. To ensure WinAVR
-# compatibility define the file type manually.
-
-.c.s:
-	$(COMPILE) -S $< -o $@
-
-clean:
-	rm -f main.hex main.lst main.obj main.cof main.list main.map main.eep.hex main.bin *.o main.s usbdrv/*.o
-
-# file targets:
-main.bin:	$(OBJECTS)
-	$(COMPILE) -o main.bin $(OBJECTS) -Wl,-Map,main.map
-
-main.hex:	main.bin
-	rm -f main.hex main.eep.hex
-	avr-objcopy -j .text -j .data -O ihex main.bin main.hex
-#	./checksize main.bin
-# do the checksize script as our last action to allow successful compilation
-# on Windows with WinAVR where the Unix commands will fail.
-
-disasm:	main.bin
-	avr-objdump -d main.bin
-
-cpp:
-	$(COMPILE) -E main.c
-
-flash:
-	avrdude -c ${ISP} -p ${TARGET} -P ${PORT} -U flash:w:main.hex
-
-fuses:
-	avrdude -c ${ISP} -p ${TARGET} -P ${PORT} -u -U hfuse:w:$(HFUSE):m -U lfuse:w:$(LFUSE):m
-
-avrdude:
-	avrdude -c ${ISP} -p ${TARGET} -P ${PORT} -v
-
-# Fuse atmega8 high byte HFUSE:
-# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)
-#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0
-#        | | | |   | +-------- BOOTSZ1
-#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)
-#        | | | +-------------- CKOPT (full output swing)
-#        | | +---------------- SPIEN (allow serial programming)
-#        | +------------------ WDTON (WDT not always on)
-#        +-------------------- RSTDISBL (reset pin is enabled)
-# Fuse atmega8 low byte LFUSE:
-# 0x9f = 1 0 0 1   1 1 1 1
-#        ^ ^ \ /   \--+--/
-#        | |  |       +------- CKSEL 3..0 (external >8M crystal)
-#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)
-#        | +------------------ BODEN (BrownOut Detector enabled)
-#        +-------------------- BODLEVEL (2.7V)
+# Copyright (C) 2020 Sven Gregori <sven@craplab.fi>
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+# 
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
 #
-# Fuse atmega48 high byte hfuse:
-# 0xdf = 1 1 0 1   1 1 1 1     factory setting
-#        ^ ^ ^ ^   ^ \-+-/
-#        | | | |   |   +------ BODLEVEL (Brown out disabled)
-#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)
-#        | | | +-------------- WDTON (WDT not always on)
-#        | | +---------------- SPIEN (allow serial programming)
-#        | +------------------ DWEN (debug wire is disabled)
-#        +-------------------- RSTDISBL (reset pin is enabled)
-# 0xdd = ext.reset, no DW, SPI, no watchdog, no save eeprom, BOD 2.7V
-# Fuse atmega48 low byte lfuse:
-# 0x62 = 0 1 1 0   0 0 1 0     factory setting
-#        ^ ^ \ /   \--+--/
-#        | |  |       +------- CKSEL 3..0 (internal 8Mhz Oszillator)
-#        | |  +--------------- SUT 1..0 (start-up time)
-#        | +------------------ CKOUT (no clock output)
-#        +-------------------- CKDIV8 (divide clock by 8)
-# 0xdc = divide/1,no clock output,fast raising power,low Pw Oszil. 3..8 Mhz
-# 0xe0 = divide/1,no clock output,fast raising power,external Oszil.
-# 0xff = divide/1,no clock output,slow raising power,low Pw Oszil 8..  Mhz
-
-
-SERIAL = `echo /dev/tty.USA19QI*`
-UISP = uisp -dprog=$S -dserial=$(SERIAL) -dpart=auto
-# The two lines above are for "uisp" and the AVR910 serial programmer connected
-# to a Keyspan USB to serial converter to a Mac running Mac OS X.
-# Choose your favorite programmer and interface.
 
-uisp:	all
-	$(UISP) --erase
-	$(UISP) --upload --verify if=main.hex
+PROGRAM=rudy_usbasp
+#OBJS += usbdrv/oddebug.o isp.o clock.o tpi.o main.o
+OBJS += isp.o clock.o tpi.o main.o
+include ../common/common.mk
+INCLUDES += -I../common/usbdrv/
 
diff -Nua /tmp/usbasp.2011-05-28/firmware/usbconfig.h ./usbconfig.h
--- /tmp/usbasp.2011-05-28/firmware/usbconfig.h	2011-05-28 11:28:52.000000000 +0300
+++ ./usbconfig.h	1970-01-01 02:00:00.000000000 +0200
@@ -1,240 +0,0 @@
-/* Name: usbconfig.h
- * Project: AVR USB driver
- * Author: Christian Starkjohann, Thomas Fischl
- * Creation Date: 2005-04-01
- * Tabsize: 4
- * Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
- * License: GNU GPL v2 (see License.txt) or proprietary (CommercialLicense.txt)
- */
-
-#ifndef __usbconfig_h_included__
-#define __usbconfig_h_included__
-
-/*
-General Description:
-This file contains parts of the USB driver which can be configured and can or
-must be adapted to your hardware.
-
-Please note that the usbdrv contains a usbconfig-prototype.h file now. We
-recommend that you use that file as a template because it will always list
-the newest features and options.
-*/
-
-/* ---------------------------- Hardware Config ---------------------------- */
-
-#define USB_CFG_IOPORTNAME      B
-/* This is the port where the USB bus is connected. When you configure it to
- * "B", the registers PORTB, PINB and DDRB will be used.
- */
-#define USB_CFG_DMINUS_BIT      0
-/* This is the bit number in USB_CFG_IOPORT where the USB D- line is connected.
- * This may be any bit in the port.
- */
-#define USB_CFG_DPLUS_BIT       1
-/* This is the bit number in USB_CFG_IOPORT where the USB D+ line is connected.
- * This may be any bit in the port. Please note that D+ must also be connected
- * to interrupt pin INT0!
- */
-#define USB_CFG_CLOCK_KHZ 12000
-/* Clock rate of the AVR in MHz. Legal values are 12000, 16000 or 16500.
- * The 16.5 MHz version of the code requires no crystal, it tolerates +/- 1%
- * deviation from the nominal frequency. All other rates require a precision
- * of 2000 ppm and thus a crystal!
- * Default if not specified: 12 MHz
- */
-
-/* ----------------------- Optional Hardware Config ------------------------ */
-
-/* #define USB_CFG_PULLUP_IOPORTNAME   D */
-/* If you connect the 1.5k pullup resistor from D- to a port pin instead of
- * V+, you can connect and disconnect the device from firmware by calling
- * the macros usbDeviceConnect() and usbDeviceDisconnect() (see usbdrv.h).
- * This constant defines the port on which the pullup resistor is connected.
- */
-/* #define USB_CFG_PULLUP_BIT          4 */
-/* This constant defines the bit number in USB_CFG_PULLUP_IOPORT (defined
- * above) where the 1.5k pullup resistor is connected. See description
- * above for details.
- */
-
-/* --------------------------- Functional Range ---------------------------- */
-
-#define USB_CFG_HAVE_INTRIN_ENDPOINT    0
-/* Define this to 1 if you want to compile a version with two endpoints: The
- * default control endpoint 0 and an interrupt-in endpoint 1.
- */
-#define USB_CFG_HAVE_INTRIN_ENDPOINT3   0
-/* Define this to 1 if you want to compile a version with three endpoints: The
- * default control endpoint 0, an interrupt-in endpoint 1 and an interrupt-in
- * endpoint 3. You must also enable endpoint 1 above.
- */
-#define USB_CFG_IMPLEMENT_HALT          0
-/* Define this to 1 if you also want to implement the ENDPOINT_HALT feature
- * for endpoint 1 (interrupt endpoint). Although you may not need this feature,
- * it is required by the standard. We have made it a config option because it
- * bloats the code considerably.
- */
-#define USB_CFG_INTR_POLL_INTERVAL      10
-/* If you compile a version with endpoint 1 (interrupt-in), this is the poll
- * interval. The value is in milliseconds and must not be less than 10 ms for
- * low speed devices.
- */
-#define USB_CFG_IS_SELF_POWERED         0
-/* Define this to 1 if the device has its own power supply. Set it to 0 if the
- * device is powered from the USB bus.
- */
-#define USB_CFG_MAX_BUS_POWER           50
-/* Set this variable to the maximum USB bus power consumption of your device.
- * The value is in milliamperes. [It will be divided by two since USB
- * communicates power requirements in units of 2 mA.]
- */
-#define USB_CFG_IMPLEMENT_FN_WRITE      1
-/* Set this to 1 if you want usbFunctionWrite() to be called for control-out
- * transfers. Set it to 0 if you don't need it and want to save a couple of
- * bytes.
- */
-#define USB_CFG_IMPLEMENT_FN_READ       1
-/* Set this to 1 if you need to send control replies which are generated
- * "on the fly" when usbFunctionRead() is called. If you only want to send
- * data from a static buffer, set it to 0 and return the data from
- * usbFunctionSetup(). This saves a couple of bytes.
- */
-#define USB_CFG_IMPLEMENT_FN_WRITEOUT   0
-/* Define this to 1 if you want to use interrupt-out (or bulk out) endpoint 1.
- * You must implement the function usbFunctionWriteOut() which receives all
- * interrupt/bulk data sent to endpoint 1.
- */
-#define USB_CFG_HAVE_FLOWCONTROL        0
-/* Define this to 1 if you want flowcontrol over USB data. See the definition
- * of the macros usbDisableAllRequests() and usbEnableAllRequests() in
- * usbdrv.h.
- */
-
-/* -------------------------- Device Description --------------------------- */
-
-#define  USB_CFG_VENDOR_ID  0xc0, 0x16  /* 5824 in dec, stands for VOTI */
-/* USB vendor ID for the device, low byte first. If you have registered your
- * own Vendor ID, define it here. Otherwise you use obdev's free shared
- * VID/PID pair. Be sure to read USBID-License.txt for rules!
- */
-#define USB_CFG_DEVICE_ID   0xdc, 0x05  /* 1500 in dec, obdev's free PID */
-/* This is the ID of the product, low byte first. It is interpreted in the
- * scope of the vendor ID. If you have registered your own VID with usb.org
- * or if you have licensed a PID from somebody else, define it here. Otherwise
- * you use obdev's free shared VID/PID pair. Be sure to read the rules in
- * USBID-License.txt!
- */
-#define USB_CFG_DEVICE_VERSION  0x04, 0x01
-/* Version number of the device: Minor number first, then major number.
- */
-#define	USB_CFG_VENDOR_NAME     'w', 'w', 'w', '.', 'f', 'i', 's', 'c', 'h', 'l', '.', 'd', 'e'
-#define USB_CFG_VENDOR_NAME_LEN 13
-/* These two values define the vendor name returned by the USB device. The name
- * must be given as a list of characters under single quotes. The characters
- * are interpreted as Unicode (UTF-16) entities.
- * If you don't want a vendor name string, undefine these macros.
- * ALWAYS define a vendor name containing your Internet domain name if you use
- * obdev's free shared VID/PID pair. See the file USBID-License.txt for
- * details.
- */
-#define	USB_CFG_DEVICE_NAME		'U', 'S', 'B', 'a', 's', 'p'
-#define	USB_CFG_DEVICE_NAME_LEN	6
-/* Same as above for the device name. If you don't want a device name, undefine
- * the macros. See the file USBID-License.txt before you assign a name.
- */
-/*#define USB_CFG_SERIAL_NUMBER   'N', 'o', 'n', 'e' */
-/*#define USB_CFG_SERIAL_NUMBER_LEN   0 */
-/* Same as above for the serial number. If you don't want a serial number,
- * undefine the macros.
- * It may be useful to provide the serial number through other means than at
- * compile time. See the section about descriptor properties below for how
- * to fine tune control over USB descriptors such as the string descriptor
- * for the serial number.
- */
-#define USB_CFG_DEVICE_CLASS    0xff
-#define USB_CFG_DEVICE_SUBCLASS 0
-/* See USB specification if you want to conform to an existing device class.
- */
-#define USB_CFG_INTERFACE_CLASS     0
-#define USB_CFG_INTERFACE_SUBCLASS  0
-#define USB_CFG_INTERFACE_PROTOCOL  0
-/* See USB specification if you want to conform to an existing device class or
- * protocol.
- */
-#define USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH    0   /* total length of report descriptor */
-/* Define this to the length of the HID report descriptor, if you implement
- * an HID device. Otherwise don't define it or define it to 0.
- */
-
-/* ------------------- Fine Control over USB Descriptors ------------------- */
-/* If you don't want to use the driver's default USB descriptors, you can
- * provide our own. These can be provided as (1) fixed length static data in
- * flash memory, (2) fixed length static data in RAM or (3) dynamically at
- * runtime in the function usbFunctionDescriptor(). See usbdrv.h for more
- * information about this function.
- * Descriptor handling is configured through the descriptor's properties. If
- * no properties are defined or if they are 0, the default descriptor is used.
- * Possible properties are:
- *   + USB_PROP_IS_DYNAMIC: The data for the descriptor should be fetched
- *     at runtime via usbFunctionDescriptor().
- *   + USB_PROP_IS_RAM: The data returned by usbFunctionDescriptor() or found
- *     in static memory is in RAM, not in flash memory.
- *   + USB_PROP_LENGTH(len): If the data is in static memory (RAM or flash),
- *     the driver must know the descriptor's length. The descriptor itself is
- *     found at the address of a well known identifier (see below).
- * List of static descriptor names (must be declared PROGMEM if in flash):
- *   char usbDescriptorDevice[];
- *   char usbDescriptorConfiguration[];
- *   char usbDescriptorHidReport[];
- *   char usbDescriptorString0[];
- *   int usbDescriptorStringVendor[];
- *   int usbDescriptorStringDevice[];
- *   int usbDescriptorStringSerialNumber[];
- * Other descriptors can't be provided statically, they must be provided
- * dynamically at runtime.
- *
- * Descriptor properties are or-ed or added together, e.g.:
- * #define USB_CFG_DESCR_PROPS_DEVICE   (USB_PROP_IS_RAM | USB_PROP_LENGTH(18))
- *
- * The following descriptors are defined:
- *   USB_CFG_DESCR_PROPS_DEVICE
- *   USB_CFG_DESCR_PROPS_CONFIGURATION
- *   USB_CFG_DESCR_PROPS_STRINGS
- *   USB_CFG_DESCR_PROPS_STRING_0
- *   USB_CFG_DESCR_PROPS_STRING_VENDOR
- *   USB_CFG_DESCR_PROPS_STRING_PRODUCT
- *   USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
- *   USB_CFG_DESCR_PROPS_HID
- *   USB_CFG_DESCR_PROPS_HID_REPORT
- *   USB_CFG_DESCR_PROPS_UNKNOWN (for all descriptors not handled by the driver)
- *
- */
-
-#define USB_CFG_DESCR_PROPS_DEVICE                  0
-#define USB_CFG_DESCR_PROPS_CONFIGURATION           0
-#define USB_CFG_DESCR_PROPS_STRINGS                 0
-#define USB_CFG_DESCR_PROPS_STRING_0                0
-#define USB_CFG_DESCR_PROPS_STRING_VENDOR           0
-#define USB_CFG_DESCR_PROPS_STRING_PRODUCT          0
-#define USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER    0
-#define USB_CFG_DESCR_PROPS_HID                     0
-#define USB_CFG_DESCR_PROPS_HID_REPORT              0
-#define USB_CFG_DESCR_PROPS_UNKNOWN                 0
-
-/* ----------------------- Optional MCU Description ------------------------ */
-
-/* The following configurations have working defaults in usbdrv.h. You
- * usually don't need to set them explicitly. Only if you want to run
- * the driver on a device which is not yet supported or with a compiler
- * which is not fully supported (such as IAR C) or if you use a differnt
- * interrupt than INT0, you may have to define some of these.
- */
-/* #define USB_INTR_CFG            MCUCR */
-/* #define USB_INTR_CFG_SET        ((1 << ISC00) | (1 << ISC01)) */
-/* #define USB_INTR_CFG_CLR        0 */
-/* #define USB_INTR_ENABLE         GIMSK */
-/* #define USB_INTR_ENABLE_BIT     INT0 */
-/* #define USB_INTR_PENDING        GIFR */
-/* #define USB_INTR_PENDING_BIT    INTF0 */
-
-#endif /* __usbconfig_h_included__ */
diff -Nua /tmp/usbasp.2011-05-28/firmware/usbconfig-rudy.h ./usbconfig-rudy.h
--- /tmp/usbasp.2011-05-28/firmware/usbconfig-rudy.h	1970-01-01 02:00:00.000000000 +0200
+++ ./usbconfig-rudy.h	2020-07-22 19:22:59.042963449 +0300
@@ -0,0 +1,44 @@
+#ifndef RUDY_USBCONFIG_DEFAULT_H
+#define RUDY_USBCONFIG_DEFAULT_H
+
+#define RUDY_IMPLEMENT_FN_READ 1
+#define RUDY_IMPLEMENT_FN_WRITE 1
+#define RUDY_IMPLEMENT_FN_WRITEOUT 0
+
+#define RUDY_VENDOR_ID  0xc0, 0x16
+#define RUDY_DEVICE_ID  0xdc, 0x05
+
+// comment out to not have one
+#define RUDY_VENDOR_NAME    'w', 'w', 'w', '.', 'f', 'i', 's', 'c', 'h', 'l', '.', 'd', 'e'
+#define RUDY_VENDOR_NAME_LEN 13
+
+// comment out to not have one
+#define RUDY_DEVICE_NAME    'U', 'S', 'B', 'a', 's', 'p'
+#define RUDY_DEVICE_NAME_LEN 6
+
+// comment out to not have one
+//#define RUDY_SERIAL_NUMBER 'N', 'o', 'p', 'e'
+//#define RUDY_SERIAL_NUMBER_LEN 4
+
+#define RUDY_DEVICE_CLASS 0xff
+#define RUDY_DEVICE_SUBCLASS 0x00
+
+#define RUDY_INTERFACE_CLASS     0
+#define RUDY_INTERFACE_SUBCLASS  0
+#define RUDY_INTERFACE_PROTOCOL  0
+
+#define RUDY_HAVE_INTRIN_ENDPOINT   0
+#define RUDY_HAVE_INTRIN_ENDPOINT3  0
+
+#define RUDY_DESCR_PROPS_DEVICE                  0
+#define RUDY_DESCR_PROPS_CONFIGURATION           0
+#define RUDY_DESCR_PROPS_STRINGS                 0
+#define RUDY_DESCR_PROPS_STRING_0                0
+#define RUDY_DESCR_PROPS_STRING_VENDOR           0
+#define RUDY_DESCR_PROPS_STRING_PRODUCT          0
+#define RUDY_DESCR_PROPS_STRING_SERIAL_NUMBER    0
+#define RUDY_DESCR_PROPS_HID                     0
+#define RUDY_DESCR_PROPS_HID_REPORT              0
+#define RUDY_DESCR_PROPS_UNKNOWN                 0
+
+#endif /* RUDY_USBCONFIG_DEFAULT_H */
Common subdirectories: /tmp/usbasp.2011-05-28/firmware/usbdrv and ./usbdrv
